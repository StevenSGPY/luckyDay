<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 定义参数常量 -->
	<property name="log.level" value="debug" />
	<!-- 日志文件要保留多长时间 -->
	<property name="log.maxHistory" value="30" />
	<!-- 日志存储的根路径 -->
	<property name="log.filePath" value="${catalina.base}/logs/webapps" />
	<!-- 日志展现格式 -->
	<property name="log.pattern"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n" />


	<!-- 正式定义 -->
	<!-- 指定日志输出的媒介，这里指定是控制台consoleAppender -->
	<appender name="consoleAppender" 
			  class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!-- 定义log输出格式 -->
			<pattern>${log.pattern}</pattern>
		</encoder>
	</appender>

	<!-- DEBUG,随着时间的推移，按天按日生成日志文件 -->
	<appender name="debugAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.filePath}/debug.log</file>
		<!-- 指定滚动策略,基于时间滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 ,加zip就是会自动压缩 -->
			<fileNamePattern>${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<!-- 日志文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<!-- 定义log输出格式,既负责转换成字符串，也负责将日志输出到指定的文件中 -->
			<pattern>${log.pattern}</pattern>
		</encoder>
		<!-- 过滤掉不是debug级别的日志，只记录debug级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<!-- deny否定其他的日志级别 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	
	
	<!-- INFO,随着时间的推移，按天按日生成日志文件 -->
	<appender name="infoAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.filePath}/info.log</file>
		<!-- 指定滚动策略,基于时间滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 ,加zip就是会自动压缩 -->
			<fileNamePattern>${log.filePath}/info/info.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<!-- 日志文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<!-- 定义log输出格式,既负责转换成字符串，也负责将日志输出到指定的文件中 -->
			<pattern>${log.pattern}</pattern>
		</encoder>
		<!-- 过滤掉不是info级别的日志，只记录info级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<!-- deny否定其他的日志级别 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	
	
	<!-- ERROR,随着时间的推移，按天按日生成日志文件 -->
	<appender name="errorAppender"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.filePath}/error.log</file>
		<!-- 指定滚动策略,基于时间滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 文件名称 ,加zip就是会自动压缩 -->
			<fileNamePattern>${log.filePath}/error/error.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<!-- 日志文件最大保存历史数量 -->
			<maxHistory>${log.maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<!-- 定义log输出格式,既负责转换成字符串，也负责将日志输出到指定的文件中 -->
			<pattern>${log.pattern}</pattern>
		</encoder>
		<!-- 过滤掉不是info级别的日志，只记录info级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<!-- deny否定其他的日志级别 -->
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	
	
	<!-- 只记录什么级别以上的日志 -->
	<logger name="com.imooc.o2o" level="${log.level}" additivity="true">
		<appender-ref ref="debugAppender"/>
		<appender-ref ref="infoAppender"/>
		<appender-ref ref="errorAppender"/>
		<!-- <appender-ref ref="consoleAppender"/> -->
	</logger>
	<!-- 根level -->
	<root level="info">
		<appender-ref ref="consoleAppender"/>
	</root>
</configuration>